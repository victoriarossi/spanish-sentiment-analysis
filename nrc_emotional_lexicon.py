# -*- coding: utf-8 -*-
"""NRC Emotional Lexicon.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/github/littlecolumns/ds4j-notebooks/blob/master/upshot-trump-emolex/notebooks/NRC%20Emotional%20Lexicon.ipynb

# NRC Emotional Lexicon

This is the [NRC Emotional Lexicon](http://saifmohammad.com/WebPages/NRC-Emotion-Lexicon.htm): "The NRC Emotion Lexicon is a list of English words and their associations with eight basic emotions (anger, fear, anticipation, trust, surprise, sadness, joy, and disgust) and two sentiments (negative and positive). The annotations were manually done by crowdsourcing."

I don't trust it, but everyone uses it.

<p class="reading-options">
  <a class="btn" href="/upshot-trump-emolex/nrc-emotional-lexicon">
    <i class="fa fa-sm fa-book"></i>
    Read online
  </a>
  <a class="btn" href="/upshot-trump-emolex/notebooks/NRC Emotional Lexicon.ipynb">
    <i class="fa fa-sm fa-download"></i>
    Download notebook
  </a>
  <a class="btn" href="https://colab.research.google.com/github/littlecolumns/ds4j-notebooks/blob/master/upshot-trump-emolex/notebooks/NRC Emotional Lexicon.ipynb" target="_new">
    <i class="fa fa-sm fa-laptop"></i>
    Interactive version
  </a>
</p>

### Prep work: Downloading necessary files
Before we get started, we need to download all of the data we'll be using.
* **NRC-emotion-lexicon-wordlevel-alphabetized-v0.92.txt:** NRC Emotional Lexicon - a list of English words and their associations with eight basic emotions and two sentiments
"""

# Make data directory if it doesn't exist
# !mkdir -p data
# !wget -nc https://nyc3.digitaloceanspaces.com/ml-files-distro/v1/upshot-trump-emolex/data/NRC-emotion-lexicon-wordlevel-alphabetized-v0.92.txt -P data

import pandas as pd

filepath = "data/NRC-emotion-lexicon-wordlevel-alphabetized-v0.92.txt"
emolex_df = pd.read_csv(filepath,  names=["word", "emotion", "association"], skiprows=45, sep='\t', keep_default_na=False)
emolex_df.head(12)

"""Seems kind of simple. A column for a word, a column for an emotion, and whether it's associated or not. You see "aback aback aback aback" because there's a row for every word-emotion pair.

## What emotions are covered?

Let's look at the 'emotion' column. What can we talk about?
"""

emolex_df.emotion.unique()

emolex_df.emotion.value_counts()

"""## How many words does each emotion have?

Each emotion doesn't have 14182 words associated with it, unfortunately! `1` means "is associated" and `0` means "is not associated."

We're only going to care about "is associated."
"""

emolex_df[emolex_df.association == 1].emotion.value_counts()

"""In theory things could be *kind of* angry or *kind of* joyous, but it doesn't work like that. If you want to spend a few hundred dollars on Mechnical Turk, though, *your own personal version can.*

## What if I just want the angry words?
"""

emolex_df[(emolex_df.association == 1) & (emolex_df.emotion == 'anger')].word

"""## Reshaping

You can also reshape the data in order to look at it a slightly different way
"""

emolex_words = emolex_df.pivot(index='word', columns='emotion', values='association').reset_index()
emolex_words.head()

"""You can now pull out individual words..."""

# If you didn't reset_index you could do this more easily
# by doing emolex_words.loc['charitable']
emolex_words[emolex_words.word == 'charitable']

"""...or individual emotions...."""

emolex_words[emolex_words.anger == 1].head()

"""...or multiple emotions!"""

emolex_words[(emolex_words.joy == 1) & (emolex_words.negative == 1)].head()

"""The useful part is going to be just getting words for a **single emotion.**"""

# Angry words
emolex_words[emolex_words.anger == 1].word

"""## Review

We took a quick look at the **Emotional Lexicon**, a sentiment analysis library that includes multiple emotional axes instead of just "positive" and "negative."

## Discussion topics

The Emotional Lexicon used words tagged individually by internet users. Do you think this is an effective method for understanding sentiment?

How does this method compare to the [Sentiment140](http://www.sentiment140.com/) method that we covered in sentiment analysis?
"""

df = pd.read_csv("datasets/full datasets/sentiment_analysis.csv")

normalized_sentiments = []

for i in range(len(df)):
    word = df.loc[i, 'sentiment']
    row = emolex_words[emolex_words['word'] == word]
    if row.empty:
        word = df.loc[i, 'emotion']
        row = emolex_words[emolex_words['word'] == word]
        if row.empty:
          normalized_sentiments.append(None)
          continue
    row = row.iloc[0]
    score = ((row[['joy','positive','trust','anticipation']].sum()) -
             (row[['anger','disgust','fear','sadness','negative']].sum())) / 10

    if score <= -0.5:
        sentiment = 'very negative'
    elif score < 0:
        sentiment = 'negative'
    elif score == 0:
        sentiment = 'neutral'
    elif score < 0.5:
        sentiment = 'positive'
    else:
        sentiment = 'very positive'
    normalized_sentiments.append(sentiment)

df['normalized_sentiment'] = normalized_sentiments

print(df[['text','normalized_sentiment']])

df.to_csv("datasets/full datasets/sentiment_analysis_with_nrc_annotations.csv")
